# .github/workflows/staging.yml

name: Test and Deploy to Staging

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET 9.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore Dependencies
      run: dotnet restore photographers_story_backend.sln

    - name: Build Solution
      run: dotnet build photographers_story_backend.sln --no-restore

    - name: Run Tests
      run: dotnet test photographers_story_backend.sln --configuration Release

  deploy:
    # only run if the 'test' job completes with a 'success' conclusion
    if: ${{ success() }}
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            PR_PORT=$((5001 + ${{ github.event.pull_request.number }}))
            CONTAINER_NAME=${{ github.event.repository.name }}-${{ github.event.pull_request.number }}
            DB_CONTAINER_NAME=${CONTAINER_NAME}-db
            NETWORK_NAME=${CONTAINER_NAME}-net

            echo "Configuring environment for ${{ github.event.repository.name }} PR #${{ github.event.pull_request.number }} on port $PR_PORT"

            # Get the latest API image from GHCR
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker pull ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.event.pull_request.number }}

            # Create a dedicated network for the PR
            docker network create $NETWORK_NAME || true

            # stop any existing containers
            docker stop $CONTAINER_NAME $DB_CONTAINER_NAME || true
            docker rm $CONTAINER_NAME $DB_CONTAINER_NAME || true

            echo "Starting MongoDB container $DB_CONTAINER_NAME"
            docker run -d \
              --name $DB_CONTAINER_NAME \
              --network $NETWORK_NAME \
              --restart unless-stopped \
              mongo:latest


            echo "Starting API container $CONTAINER_NAME on port $PR_PORT"
            docker run -d \
              --name $CONTAINER_NAME \
              --network $NETWORK_NAME \
              -p $PR_PORT:8080 \
              -e "ASPNETCORE_ENVIRONMENT=Staging" \
              -e "MongoDbDatabase__ConnectionString=mongodb://${DB_CONTAINER_NAME}:27017" \
              -e "MongoDbDatabase__DatabaseName=${{ github.event.repository.name }}-${{ github.event.pull_request.number }}" \
              --restart unless-stopped \
              ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.event.pull_request.number }}

            docker logout ghcr.io

            echo "Creating caddy snippet for port $PR_PORT."
            mkdir -p "/etc/caddy/snippets/photographers_story_backend"
            cat << EOF > "/etc/caddy/snippets/photographers_story_backend/${{ github.event.pull_request.number }}.caddy"
            handle_path /${{ github.event.pull_request.number }}/* {
              handle /api/* {
                reverse_proxy localhost:${PR_PORT}
              }
            }
            EOF

            caddy reload

            echo "Deployment for PR #${{ github.event.pull_request.number }} on port $PR_PORT complete"