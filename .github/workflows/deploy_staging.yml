name: Deploy API to VPS

on:
  # This workflow is now triggered when the 'Run XUnit Tests' workflow
  # completes successfully on the 'main' branch.
  workflow_run:
    # Specify the name of the workflow that should trigger this one.
    # This must exactly match the 'name' field in your test.yml workflow.
    workflows: ["Run XUnit Tests"]
    # Trigger this workflow only when the referenced workflow has 'completed'.
    types:
      - completed
    # Only consider runs of the referenced workflow that occurred on the 'main' branch.
    branches:
      - main

jobs:
  deploy:
    # This job will only run if the triggering 'Run XUnit Tests' workflow completed with a 'success' conclusion.
    # This ensures that deployment only proceeds when your tests have passed.
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    # Permissions for GitHub Actions:
    # id-token: Required for OIDC authentication to GHCR.
    # packages: Required to push and pull Docker images from GHCR.
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    # Checkout the repository code
    - name: Checkout Repository
      uses: actions/checkout@v4

    # Set up Buildx for Docker, which enables advanced build features like caching
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Log in to the GitHub Container Registry (GHCR)
    # This uses the GITHUB_TOKEN to authenticate, which has permissions
    # to push/pull images for this repository by default.
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build and Push Docker Image to GitHub Container Registry
    # This single action replaces the separate 'docker build' and 'docker push' commands.
    # It automatically handles pushing the image to the specified tags.
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: . # The build context is the root of the repository where the Dockerfile is
        push: true # Push the image to the registry
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha # Use GitHub Actions cache for faster builds
        cache-to: type=gha,mode=max # Cache results for future builds

    # Deploy to VPS via SSH
    # This step connects to your VPS and executes commands to pull the new image
    # and update the running container.
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        # The script to run on the VPS:
        # 1. Log in to GHCR on the VPS (using a PAT or GITHUB_TOKEN with package read access).
        #    For simplicity, we'll use a PAT stored in SSH_GHCR_PAT.
        # 2. Pull the latest Docker image.
        # 3. Stop and remove any existing container running this image.
        # 4. Start a new container, mapping host port 5001 to container port 80.
        # 5. Use `docker compose` if you have a `docker-compose.yml` for more complex setups.
        script: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
          docker pull ghcr.io/${{ github.repository_owner }}/photographers-story-backend:latest
          docker stop photographers-story-backend || true
          docker rm photographers-story-backend || true
          docker run -d \
            --name photographers-story-backend \
            -p 5001:80 \
            ghcr.io/${{ github.repository_owner }}/photographers-story-backend:latest
          docker logout ghcr.io